Works Cited
Hillegass, A., & Preble, A. (2011). Cocoa programming for mac os x. (4th ed.). Upper Saddle River, New Jersey: Pearson Education Inc.

The Programming Environment
One of the big decisions the group needed to make initially was what language and environment we wanted to build our project on. After doing some research on our options we settled on using Objective-C in the in MAC OSX Cocoa environment. We also decided that we would use Github in order keep a working repository for us to use throughout development.

One of the large benefits to Objective-C is that, even though not everyone in our group has worked with it, we have all done a mixture of C programming and object oriented programming. Objective-C combines these worlds by extending the C programming language in such a way that makes it an object oriented language (Hillegass & Preble, 2011). This will help us in our project by allowing us to access lower level details that are offered in C, as well as have the elegance of creating classes and objects that suite our needs as we may do in Java.

Developing on the Mac OS X using Cocoa will give us access to development tools such as XCode and Instruments, which come standard as part of the Mac OS X Developer Tools (Hillegass & Preble, 2011). These tools will offer us the resources we need in order to implement our project very efficiently by allowing us an IDE to work in, as well as debugging tools to fix any various errors. Cocoa also offers collections of classes and functionality in packages called frameworks (Hillegass & Preble, 2011). We hope to be able to use these Cocoa frameworks to implement various functionality that we wish to utilize rather than having to write those components by scratch.

The User Interface
One of the large benefits of the Developer Tools is the Interface Builder that is in XCode. The Interface Builder allows us to create UI components using a tool rather than coding buttons and frames by hand (Hillegass & Preble, 2011). The UI components in MAC OS X are represented utilizing XIB. XIB is simply a representation of XML (Hillegass & Preble, 2011). When we create our user interface XCode handles all of the saving of the components in the XIB, allowing us to concentrate more on the design portion.

The important benefit of the Interface Builder is that we can also stitch our back end functionality to the UI components, which will also be saved to the XIB by XCode (Hillegass & Preble, 2011). This will be important because a user will need to perform actions in order to show a picture in our application by using button components. Interface Builder lets us do this easily which makes it possible to focus heavily on the back end rather than spending a lot of time designing a UI from scratch.

Concluding remarks
A large portion of work thus far has been in bringing ourselves up to speed. After reading Objective-C and MAC OS X documentation we feel confident that we will be able to become fluent in a short period of time. We hope that this choice will allow us to implement our project in an efficient manner, and hopefully leave time to play around with additional functionality.